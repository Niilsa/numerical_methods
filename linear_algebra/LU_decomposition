import numpy as np

def LU(A):
    n = A.shape[0]
    L = np.eye(n)
    U = np.eye(n)
    for i in range(n):
        for j in range(n):
            if (i >= j):
                mult = [L[i][k] * U[k][j] for k in range(j)]
                L[i][j] = A[i][j] - sum(mult)
            else:
                mult = [L[i][k] * U[k][j] for k in range(i)]
                U[i][j] = (A[i][j] - sum(mult))/L[i][i]
    return (L, U)

def solve(A, f):
    L, U = LU(A)
    n = A.shape[0]
    y = np.zeros(n)
    for i in range(n):
        mult = [(L[i][j] * y[j]) for j in range(i)]
        y[i] = (f[i] - sum(mult))/L[i][i]
    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        mult = [(U[i][j] * x[j]) for j in range(i + 1, n)]
        x[i] = (y[i] - sum(mult))/U[i][i]
    return x

def main():
    A = np.array([[2, 1, 4],
                  [3, 2, 1],
                  [1, 3, 3]])
    f = np.array([16, 10, 16])
    print(A @ solve(A, f))
    

main()
